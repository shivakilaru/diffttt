# Miscellaneous Bootcamp Notes
(personal reference. none of this belongs to me.)

### Ruby
#### Class Variables vs. Instance Variables vs. Normal Variables

__Instance vs. normal:__ 
A normal variable has scope only within the current context; an instance variable has scope throughout one instance of a class.
```ruby
class User
  def set_name
    @name = "Bob"
    surname = "Cratchett"
  end

  def hi
    puts "Hello, " + @name
  end

  def hello
    puts "Hello, Mr " + surname
  end
end

irb(main):022:0> u = User.new
=> #<User:0x29cbfb0>
irb(main):023:0> u.set_name
irb(main):024:0> u.hi
Hello, Bob
=> nil
irb(main):025:0> u.hello
NameError: undefined local variable or method `surname' for #<User:0x29cbfb0 @name="Bob">
```
===============================
__Class vs. instance:__
When you set a class variable, you set it for the superclass and all of the subclasses.
```ruby
class Triangle < Polygon
  @@sides = 3
end

puts Triangle.sides # => 3
puts Polygon.sides # => 3
```


### JavaScript
#### Defining functions
There are many different ways to define and then call a function:
```javascript
function isNimble(){ return true; } 
var canFly = function(){ return true; }; 
window.isDeadly = function(){ return true; }; 
log(isNimble, canFly, isDeadly);

>>> function isNimble(){ return true; } function (){ return true; } function (){ return true; }
```
==============================
The order of function definition doesn't necessarily matter.
```javascript
var canFly = function(){ return true; }; 
window.isDeadly = function(){ return true; }; 
assert( isNimble() && canFly() && isDeadly(), "Still works, even though isNimble is moved." ); 
function isNimble(){ return true; }

>>> Still works, even though isNimble is moved.
```